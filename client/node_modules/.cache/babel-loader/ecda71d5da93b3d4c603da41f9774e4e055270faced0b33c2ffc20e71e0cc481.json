{"ast":null,"code":"var _jsxFileName = \"/Users/abishan/Desktop/ReactProjects/Insightify/client/src/PlaylistsPage/LineChart.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport Chart from \"chart.js/auto\";\nimport { Line } from \"react-chartjs-2\";\nimport { CategoryScale } from \"chart.js\";\nimport \"./styles/LineChart.css\";\nimport testData from \"./output.json\";\nimport { getPlaylistTopArtistsOverTime } from \"../apiCalls\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChart.register(CategoryScale);\nfunction createDataSets(topArtistsOverTime) {\n  const colors = [\"rgba(75, 192, 192, 1)\",\n  // Aqua\n  \"#FF5733\",\n  // Vibrant Red\n  \"#33FF57\",\n  // Bright Green\n  \"#3357FF\",\n  // Vibrant Blue\n  \"#F39C12\",\n  // Orange\n  \"#8E44AD\",\n  // Purple\n  \"#1ABC9C\",\n  // Teal\n  \"#E74C3C\",\n  // Soft Red\n  \"#3498DB\",\n  // Soft Blue\n  \"#9B59B6\",\n  // Lavender\n  \"#2ECC71\" // Emerald Green\n  ];\n  let graphLabels = Object.keys(topArtistsOverTime[Object.keys(topArtistsOverTime)[0]]);\n  let graphDataSets = [];\n  Object.entries(topArtistsOverTime).forEach(([key, value]) => {\n    graphDataSets.push({\n      label: key,\n      data: Object.values(value),\n      // Y-axis data\n      borderColor: colors[0],\n      // Line color\n      backgroundColor: \"rgba(75, 192, 192, 0.2)\",\n      // Fill under the line\n      borderWidth: 2\n    });\n    colors.shift();\n  });\n  const data = {\n    labels: graphLabels,\n    // X-axis labels\n    datasets: graphDataSets\n  };\n  return data;\n}\nexport default function LineChart({\n  playlistTracks,\n  token\n}) {\n  _s();\n  const [topArtistsOverTime, setTopArtistsOverTime] = useState(null);\n  console.log(playlistTracks);\n  useEffect(() => {\n    const promise = getPlaylistTopArtistsOverTime(token, JSON.stringify(playlistTracks));\n    promise.then(function (response) {\n      setTopArtistsOverTime(response);\n    });\n  }, []);\n  const options = {\n    responsive: true,\n    plugins: {\n      legend: {\n        position: \"top\",\n        labels: {\n          boxWidth: 24,\n          color: \"#b3b7bd\",\n          font: {\n            size: 12\n          }\n        }\n      }\n    },\n    scales: {\n      x: {\n        ticks: {\n          color: \"#F2F4F7\" // Change X-axis font color\n        },\n        title: {\n          display: true\n        }\n      },\n      y: {\n        ticks: {\n          color: \"#F2F4F7\" // Change Y-axis font color\n        },\n        title: {\n          display: true,\n          color: \"#F2F4F7\" // Change Y-axis title color\n        }\n      }\n    }\n  };\n  if (topArtistsOverTime === null) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 44\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"line-chart-card\",\n    className: \"playlist-card\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-title\",\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"Playlist Evolution\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Line, {\n      data: createDataSets(topArtistsOverTime),\n      options: options\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 5\n  }, this);\n}\n_s(LineChart, \"KNoS/KVJB1ukBXrHFVp2DKHOMo0=\");\n_c = LineChart;\nvar _c;\n$RefreshReg$(_c, \"LineChart\");","map":{"version":3,"names":["React","useState","useEffect","Chart","Line","CategoryScale","testData","getPlaylistTopArtistsOverTime","jsxDEV","_jsxDEV","register","createDataSets","topArtistsOverTime","colors","graphLabels","Object","keys","graphDataSets","entries","forEach","key","value","push","label","data","values","borderColor","backgroundColor","borderWidth","shift","labels","datasets","LineChart","playlistTracks","token","_s","setTopArtistsOverTime","console","log","promise","JSON","stringify","then","response","options","responsive","plugins","legend","position","boxWidth","color","font","size","scales","x","ticks","title","display","y","children","fileName","_jsxFileName","lineNumber","columnNumber","id","className","_c","$RefreshReg$"],"sources":["/Users/abishan/Desktop/ReactProjects/Insightify/client/src/PlaylistsPage/LineChart.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nimport Chart from \"chart.js/auto\";\nimport { Line } from \"react-chartjs-2\";\nimport { CategoryScale } from \"chart.js\";\nimport \"./styles/LineChart.css\";\nimport testData from \"./output.json\";\nimport { getPlaylistTopArtistsOverTime } from \"../apiCalls\";\nChart.register(CategoryScale);\n\n\nfunction createDataSets(topArtistsOverTime) {\n  const colors = [\n    \"rgba(75, 192, 192, 1)\", // Aqua\n    \"#FF5733\", // Vibrant Red\n    \"#33FF57\", // Bright Green\n    \"#3357FF\", // Vibrant Blue\n    \"#F39C12\", // Orange\n    \"#8E44AD\", // Purple\n    \"#1ABC9C\", // Teal\n    \"#E74C3C\", // Soft Red\n    \"#3498DB\", // Soft Blue\n    \"#9B59B6\", // Lavender\n    \"#2ECC71\"  // Emerald Green\n];\n  let graphLabels = Object.keys(topArtistsOverTime[Object.keys(topArtistsOverTime)[0]]);\n\n  let graphDataSets = [];\n  Object.entries(topArtistsOverTime).forEach(([key, value]) => {\n    graphDataSets.push({\n      label: key,\n      data: Object.values(value), // Y-axis data\n      borderColor: colors[0], // Line color\n      backgroundColor: \"rgba(75, 192, 192, 0.2)\", // Fill under the line\n      borderWidth: 2,\n    \n    });\n    colors.shift();\n  });\n  const data = {\n    labels: graphLabels, // X-axis labels\n    datasets: graphDataSets,\n  };\n\n  return data;\n}\n\nexport default function LineChart({playlistTracks, token}) {\n  const [topArtistsOverTime, setTopArtistsOverTime]= useState(null)\n  console.log(playlistTracks)\n  useEffect(() => {\n    const promise = getPlaylistTopArtistsOverTime(token, JSON.stringify(playlistTracks));\n    promise.then(function(response) {\n      setTopArtistsOverTime(response)\n    })\n  }, []);\n\n  const options = {\n    responsive: true,\n    plugins: {\n      legend: {\n        position: \"top\",\n        labels: {\n          boxWidth: 24,\n          color: \"#b3b7bd\",\n          font: {\n            size: 12,\n          },\n        },\n      },\n    },\n    scales: {\n      x: {\n        ticks: {\n          color: \"#F2F4F7\", // Change X-axis font color\n        },\n        title: {\n          display: true,\n        },\n      },\n      y: {\n        ticks: {\n          color: \"#F2F4F7\", // Change Y-axis font color\n        },\n        title: {\n          display: true,\n          color: \"#F2F4F7\", // Change Y-axis title color\n        },\n      },\n    },\n  };\n\n  if (topArtistsOverTime === null) {return <div>Loading...</div>}\n  return (\n    <div id=\"line-chart-card\" className=\"playlist-card\">\n      <div className=\"card-title\">\n        <span>Playlist Evolution</span>\n      </div>\n\n      <Line data={createDataSets(topArtistsOverTime)} options={options} />\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}