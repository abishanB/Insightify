{"ast":null,"code":"import fetch from \"node-fetch\";\nconst clientID = process.env.REACT_APP_CLIENT_ID;\nconst clientSecret = process.env.REACT_APP_CLIENT_SECRET;\nfunction checkResponse(response) {\n  if (!response.ok) {\n    return false;\n  }\n  return response.json();\n}\nexport async function getToken() {\n  //client credentials flow\n  const response = await fetch('https://accounts.spotify.com/api/token', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      'Authorization': 'Basic ' + btoa(clientID + ':' + clientSecret)\n    },\n    body: 'grant_type=client_credentials'\n  });\n  return checkResponse(await response);\n}\nexport async function getTokenWithRefreshToken(refreshToken, redirect_uri = 'http://localhost:3000') {\n  //gets access token using previos refresh token\n  console.log(\"fetching token with refresh token\");\n  var details = {\n    grant_type: 'refresh_token',\n    refresh_token: refreshToken,\n    redirect_uri: redirect_uri\n  };\n  var formBody = [];\n  for (var property in details) {\n    var encodedKey = encodeURIComponent(property);\n    var encodedValue = encodeURIComponent(details[property]);\n    formBody.push(encodedKey + \"=\" + encodedValue);\n  }\n  formBody = formBody.join(\"&\");\n  const response = await fetch('https://accounts.spotify.com/api/token', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      'Authorization': 'Basic ' + btoa(clientID + ':' + clientSecret)\n    },\n    body: formBody\n  });\n  return checkResponse(await response);\n}\nexport async function getTokenWithAuthCode(code, redirect_uri = 'http://localhost:3000') {\n  //gets access token using auth code\n  //redirect_uri redirects to the current page, ex /tracks, /artists\n  console.log(\"fetching token with auth code\");\n  var details = {\n    grant_type: 'authorization_code',\n    code: code,\n    redirect_uri: redirect_uri\n  };\n  var formBody = [];\n  for (var property in details) {\n    var encodedKey = encodeURIComponent(property);\n    var encodedValue = encodeURIComponent(details[property]);\n    formBody.push(encodedKey + \"=\" + encodedValue);\n  }\n  formBody = formBody.join(\"&\");\n  const response = await fetch('https://accounts.spotify.com/api/token', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      'Authorization': 'Basic ' + btoa(clientID + ':' + clientSecret)\n    },\n    body: formBody\n  });\n  return checkResponse(await response);\n}\nexport async function getEndpointResult(access_token, endpoint, endpointType = null) {\n  //for calls with custom endpoint ie next calls\n  if (endpointType != null) {\n    console.log(\"ENDPOINT CALL -\", endpointType);\n  }\n  const response = await fetch(endpoint, {\n    method: 'GET',\n    headers: {\n      'Authorization': 'Bearer ' + access_token\n    }\n  });\n  return checkResponse(await response);\n}\n\n//originally in Wrapper.js, if client credentials is needed\n/*onGetToken = () => {//clientCredentials\n    var that = this;\n    const promise = getToken();\n    promise.then(function(token_promise) {\n        that.setState({token:token_promise.access_token})\n    })\n  } */","map":{"version":3,"names":["fetch","clientID","process","env","REACT_APP_CLIENT_ID","clientSecret","REACT_APP_CLIENT_SECRET","checkResponse","response","ok","json","getToken","method","headers","btoa","body","getTokenWithRefreshToken","refreshToken","redirect_uri","console","log","details","grant_type","refresh_token","formBody","property","encodedKey","encodeURIComponent","encodedValue","push","join","getTokenWithAuthCode","code","getEndpointResult","access_token","endpoint","endpointType"],"sources":["/Users/abishan/Desktop/ReactProjects/Insightify/client/src/apiCalls.js"],"sourcesContent":["import fetch from \"node-fetch\";\nconst clientID = process.env.REACT_APP_CLIENT_ID\nconst clientSecret = process.env.REACT_APP_CLIENT_SECRET\n\nfunction checkResponse(response){\n  if (!response.ok){\n    return false\n  }\n  return response.json()\n}\n\nexport async function getToken(){//client credentials flow\n    const response = await fetch('https://accounts.spotify.com/api/token', {\n      method:'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n        'Authorization': 'Basic ' + btoa(clientID+':'+clientSecret)\n      },  \n      body:'grant_type=client_credentials'\n    });\n  \n    return checkResponse(await response)\n  }\n  \nexport async function getTokenWithRefreshToken(refreshToken, redirect_uri='http://localhost:3000'){//gets access token using previos refresh token\n    console.log(\"fetching token with refresh token\")\n    var details = {\n        grant_type: 'refresh_token',\n        refresh_token: refreshToken,\n        redirect_uri: redirect_uri,\n    };\n  \n    var formBody = [];\n    for (var property in details) {\n      var encodedKey = encodeURIComponent(property);\n      var encodedValue = encodeURIComponent(details[property]);\n      formBody.push(encodedKey + \"=\" + encodedValue);\n    }\n    formBody = formBody.join(\"&\");\n  \n    const response = await fetch('https://accounts.spotify.com/api/token', {\n      method:'POST',\n    \n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n        'Authorization': 'Basic ' + btoa(clientID+':'+clientSecret)\n      },  \n      body: formBody\n    });\n    return checkResponse(await response)\n  }\n  \nexport async function getTokenWithAuthCode(code, redirect_uri='http://localhost:3000'){//gets access token using auth code\n    //redirect_uri redirects to the current page, ex /tracks, /artists\n    console.log(\"fetching token with auth code\")\n    var details = {\n        grant_type: 'authorization_code',\n        code: code,\n        redirect_uri: redirect_uri,\n    };\n  \n    var formBody = [];\n    for (var property in details) {\n      var encodedKey = encodeURIComponent(property);\n      var encodedValue = encodeURIComponent(details[property]);\n      formBody.push(encodedKey + \"=\" + encodedValue);\n    }\n    formBody = formBody.join(\"&\");\n \n    const response = await fetch('https://accounts.spotify.com/api/token', {\n      method:'POST',\n    \n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n        'Authorization': 'Basic ' + btoa(clientID+':'+clientSecret)\n      },  \n      body: formBody\n    });\n    return checkResponse(await response)\n  }\n  \nexport async function getEndpointResult(access_token, endpoint, endpointType=null){//for calls with custom endpoint ie next calls\n  if (endpointType!=null) {console.log(\"ENDPOINT CALL -\",endpointType)}\n  \n  const response = await fetch(endpoint, {\n    method:'GET',\n    headers: {\n      'Authorization': 'Bearer ' + access_token,\n    } \n  });\n \n  return checkResponse(await response)\n}\n\n//originally in Wrapper.js, if client credentials is needed\n/*onGetToken = () => {//clientCredentials\n    var that = this;\n    const promise = getToken();\n    promise.then(function(token_promise) {\n        that.setState({token:token_promise.access_token})\n    })\n  } */"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}