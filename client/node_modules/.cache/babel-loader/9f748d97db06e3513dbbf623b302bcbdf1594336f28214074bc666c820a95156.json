{"ast":null,"code":"var _jsxFileName = \"/Users/abishan/Desktop/ReactProjects/Insightify/client/src/PlaylistsPage/PlaylistAnalysis.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getEndpointResult } from '../apiCalls';\nimport LoadingIcon from '../components/LoadingIcon';\nimport GenreChart from './GenreChart';\nimport \"./styles/PlaylistAnalysis.css\";\nimport PlaylistSummary from './PlaylistSummaryCard';\nimport TopArtistsAlbums from './PlaylistTopArtistsAlbums';\nimport LineChart from './LineChart';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction sortProperties(obj) {\n  //sorts artists, albums and genres from most occuring to least\n  var sortable = [];\n  for (var key in obj) if (obj.hasOwnProperty(key)) sortable.push([key, obj[key]]);\n  sortable.sort(function (a, b) {\n    return b[1].totalOccurences - a[1].totalOccurences;\n  });\n  return sortable; // array in format [ [ key1, val1 ], [ key2, val2 ], ... ]\n}\nfunction filterPlaylistTracks(playlistTracks) {\n  let filteredPlaylistTracks = [];\n  for (let trackObj of Object.values(playlistTracks)) {\n    if (trackObj.track === null) {\n      continue;\n    } //dont include tracks that cant be found\n    if (trackObj.track.type !== \"track\") {\n      continue;\n    } //dont include podcasts etc\n    if (trackObj.is_local) {\n      continue;\n    } //skip local songs\n    filteredPlaylistTracks.push(trackObj);\n  }\n  return filteredPlaylistTracks;\n}\nfunction calculateAveragePopularity(playlistTracks) {\n  let totalPopularity = 0;\n  for (let trackObj of Object.values(playlistTracks)) {\n    totalPopularity += trackObj.track.popularity;\n  }\n  return Math.round(totalPopularity / playlistTracks.length);\n}\nfunction getPlaylistArtists(playlistTracks) {\n  //collect how many times a artist appears in the playlist and returns it sorted\n  let playlistArtists = {};\n  for (let trackObj of Object.values(playlistTracks)) {\n    trackObj.track.artists.forEach(artist => {\n      //iterate each artist credited on a song\n      if (artist.name in playlistArtists) {\n        //if artist has already appeared in list\n        playlistArtists[artist.name].totalOccurences += 1;\n      } else {\n        //if artist's first time appearing\n        playlistArtists[artist.name] = {};\n        Object.defineProperty(playlistArtists[artist.name], 'totalOccurences', {\n          value: 1,\n          writable: true\n        });\n        Object.defineProperty(playlistArtists[artist.name], 'id', {\n          value: artist.id,\n          writable: true\n        });\n        Object.defineProperty(playlistArtists[artist.name], 'href', {\n          value: artist.external_urls.spotify,\n          writable: true\n        });\n        Object.defineProperty(playlistArtists[artist.name], 'imageURL', {\n          value: null,\n          writable: true\n        });\n      }\n    });\n  }\n  if (Object.keys(playlistArtists).length === 0) {\n    return \"No Data\";\n  }\n  return sortProperties(playlistArtists);\n}\nfunction getPlaylistAlbums(playlistTracks) {\n  //collect how many times a album appears in the playlist and returns it sorted - exclude singles with 1 songs\n  let playlistAlbums = {};\n  for (let trackObj of Object.values(playlistTracks)) {\n    //iterate all tracks\n    if (trackObj.track.album.total_tracks === 1) {\n      continue;\n    } //skip albums with only 1 song(singles)\n\n    if (trackObj.track.album.name in playlistAlbums) {\n      playlistAlbums[trackObj.track.album.name].totalOccurences += 1;\n    } else {\n      playlistAlbums[trackObj.track.album.name] = {};\n      Object.defineProperty(playlistAlbums[trackObj.track.album.name], 'totalOccurences', {\n        value: 1,\n        writable: true\n      });\n      Object.defineProperty(playlistAlbums[trackObj.track.album.name], 'href', {\n        value: trackObj.track.album.external_urls.spotify,\n        writable: true\n      });\n      Object.defineProperty(playlistAlbums[trackObj.track.album.name], 'imageURL', {\n        value: trackObj.track.album.images[0].url,\n        writable: true\n      });\n    }\n  }\n  return sortProperties(playlistAlbums);\n}\nfunction likedSongsToPlaylist(likedSongsObj) {\n  //convert likedSongs object to playlist Object by adding corresponding properties\n  Object.defineProperty(likedSongsObj, \"name\", {\n    value: \"Liked Songs\"\n  });\n  Object.defineProperty(likedSongsObj, \"owner\", {\n    value: {\n      \"external_urls\": {\n        \"spotify\": \"https://open.spotify.com/collection/tracks\"\n      }\n    }\n  });\n  Object.defineProperty(likedSongsObj, \"external_urls\", {\n    value: {\n      \"spotify\": \"https://open.spotify.com/collection/tracks\"\n    }\n  });\n  Object.defineProperty(likedSongsObj, \"images\", {\n    value: [{\n      url: 'https://misc.scdn.co/liked-songs/liked-songs-300.png'\n    }]\n  });\n  Object.defineProperty(likedSongsObj, \"tracks\", {\n    value: {\n      \"total\": likedSongsObj.total\n    }\n  });\n  Object.defineProperty(likedSongsObj, \"followers\", {\n    value: {\n      \"total\": \"N/A\"\n    }\n  });\n  return likedSongsObj;\n}\nexport default function PlaylistInfo(props) {\n  _s();\n  const [playlist, setPlaylist] = useState([]);\n  const [playlistTracks, setPlaylistTracks] = useState([]);\n  const [topArtistsInPlaylist, setTopArtistsInPlaylist] = useState([]); //{index: [artist, {id , href, imageURL, totalOccurences}]}\n  const [topGenresInPlaylists, setTopGenresInPlaylists] = useState([]);\n  const [topAlbumsInPlaylist, setTopAlbumsInPlaylist] = useState([]);\n  const [averagePopularity, setAveragePopularity] = useState();\n  const [noData, setNoData] = useState(false);\n  const [error, setError] = useState(false);\n  const [readyToRender, setReadyToRender] = useState(false);\n  const {\n    playlistID\n  } = useParams(); //gets playlistID passed from router and in URL\n\n  if (error) {\n    throw new Error(\"Can't fetch playlist\", playlistID);\n  }\n  useEffect(() => {\n    //on page load   \n    if (playlist.length !== 0) {\n      return;\n    }\n    onGetPlaylist(playlistID);\n    // eslint-disable-next-line\n  }, []);\n  useEffect(() => {\n    //runs when playlist is recieved \n    if (playlist.length === 0) {\n      return;\n    }\n    if (playlistID !== \"liked_songs\" && playlist.tracks.total === 0 || playlistID === \"liked_songs\" && playlist.total === 0) {\n      //if playlist is empty or only contains local songs\n      setNoData(true);\n      setReadyToRender(true);\n      return;\n    }\n    if (playlistID === \"liked_songs\") {\n      onGetPlaylistTracks(playlist.items, playlist.next);\n    } else {\n      onGetPlaylistTracks(playlist.tracks.items, playlist.tracks.next);\n    }\n    // eslint-disable-next-line\n  }, [playlist]);\n  useEffect(() => {\n    //runs when all playlist tracks have been recieved\n    if (playlistTracks.length === 0) {\n      return;\n    }\n    let getPlaylistArtistsResult = getPlaylistArtists(playlistTracks);\n    if (getPlaylistArtistsResult === \"No Data\") {\n      setNoData(true);\n      setReadyToRender(true);\n      return;\n    }\n    //playlistArtists is updated in getGenres so artist image can also be retrieved\n    getGenres(getPlaylistArtistsResult, props.token);\n    setTopAlbumsInPlaylist(getPlaylistAlbums(playlistTracks)); //set top albums \n    setAveragePopularity(calculateAveragePopularity(playlistTracks)); //set average popularity\n    // eslint-disable-next-line\n  }, [playlistTracks]);\n  useEffect(() => {\n    //when playlist artists and ids are recieved to get genres\n    if (topGenresInPlaylists.length === 0) {\n      return;\n    }\n    setReadyToRender(true);\n  }, [topGenresInPlaylists]);\n  function getGenres(playlistArtists, access_token) {\n    //get genres of artists in playlists, as well as sets artist Image URL\n    //included in parent function to access useState\n    //makes a call to artist endpoint where artist genre can be found\n    const capitalizeFirstLetter = str => str.charAt(0).toUpperCase() + str.slice(1); //to capitalize the first letter of genre names\n\n    let playlistGenres = {}; //{playlistGenre: number of occurences}\n    let numOfArtists = playlistArtists.length;\n    let artistsSetsPerFifty = Math.ceil(numOfArtists / 50);\n    let playlistsArtistsCopy = playlistArtists; //update topAritsts with ImageURL property\n    let promises = [];\n    for (let i = 0; i < artistsSetsPerFifty; i++) {\n      //max number of artists per api call is 50, iterate through artists in sets of 50\n      let artistsIDs = [];\n      for (let artistIndex = 50 * i; artistIndex < 50 * (i + 1); artistIndex++) {\n        //put all ids in a list so it can be passed to api as a string\n        if (artistIndex >= numOfArtists) {\n          break;\n        }\n        artistsIDs.push(playlistArtists[artistIndex][1].id);\n      }\n      promises.push(getEndpointResult(access_token, `https://api.spotify.com/v1/artists?ids=${artistsIDs.join(\",\")}`, \"fetching artists\"));\n    }\n    Promise.all(promises).then(artistPromiseResults => {\n      for (const [artistSetNum, artistSet] of Object.entries(artistPromiseResults)) {\n        for (const [artistKey, artist] of Object.entries(artistSet.artists)) {\n          let artistIndex = parseInt(artistKey) + artistSetNum * 50; //index of artist in original playlistsArtistsCopy list\n          let artistOccurences = playlistArtists[artistIndex][1].totalOccurences;\n          if (artist.images.length === 0) {\n            //check if artist image is not availabe\n            //set artist image to blank\n            playlistsArtistsCopy[artistIndex][1].imageURL = \"https://community.spotify.com/t5/image/serverpage/image-id/55829iC2AD64ADB887E2A5/image-size/large?v=v2&px=999\";\n          } else {\n            playlistsArtistsCopy[artistIndex][1].imageURL = artist.images[0].url;\n          }\n          for (var genre of artist.genres) {\n            //iterate through each genre of artist \n            var genreCapitalized = capitalizeFirstLetter(genre); //capitalize first letter of genre name\n            if (genreCapitalized in playlistGenres) {\n              playlistGenres[genreCapitalized].totalOccurences += artistOccurences; //add artist genre based on how many times artist appeared in a playlist\n            } else {\n              playlistGenres[genreCapitalized] = {};\n              Object.defineProperty(playlistGenres[genreCapitalized], 'totalOccurences', {\n                value: 1,\n                writable: true,\n                enumerable: true\n              });\n            }\n          }\n        }\n      }\n      //when finished loop, update state\n      setTopArtistsInPlaylist(playlistsArtistsCopy);\n      setTopGenresInPlaylists(sortProperties(playlistGenres));\n    });\n  }\n  function onGetPlaylistTracks(playlistTracks, nextEndpoint) {\n    //Only 100 songs can be retrived at once\n    //recursivly calls each endpoint to get sets of 100 songs\n    //inital playlist endpoint returns 100 tracks and a next endpoint for the next 100\n    //if next endpoint doesnt exist set state and return func\n    //else make a api call to the endpoint then call function again while adding to the list of tracks\n    if (nextEndpoint === null || playlistTracks.length >= 2200) {\n      //dont scan over 22 00 tracks\n      setPlaylistTracks(filterPlaylistTracks(playlistTracks));\n      console.table(playlistTracks);\n      return;\n    }\n    const promise = getEndpointResult(props.token, nextEndpoint, \"Fetching tracks\");\n    promise.then(function (tracksObject) {\n      //setPlaylistTracks(playlistTracks.concat(tracksObject.items))\n      onGetPlaylistTracks(playlistTracks.concat(tracksObject.items), tracksObject.next);\n    });\n  }\n  function onGetPlaylist(playlistID) {\n    //get playlist object and update state\n    var promise;\n    if (playlistID === \"liked_songs\") {\n      promise = getEndpointResult(props.token, `https://api.spotify.com/v1/me/tracks?limit=50`, \"Fetching Liked Songs\"); //users liked songs endpoint\n    } else {\n      promise = getEndpointResult(props.token, `https://api.spotify.com/v1/playlists/${playlistID}`, \"Fetching Playlist\");\n    }\n    promise.then(function (playlistObj) {\n      if (playlistObj === false) {\n        setError(true);\n        return;\n      }\n      //add properties to handle liked songs as a playlist\n      if (playlistID === \"liked_songs\") {\n        playlistObj = likedSongsToPlaylist(playlistObj);\n      }\n      setPlaylist(playlistObj);\n    });\n  }\n  if (!readyToRender) {\n    return /*#__PURE__*/_jsxDEV(LoadingIcon, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 30\n    }, this);\n  }\n  if (noData) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-container\",\n      children: [/*#__PURE__*/_jsxDEV(PlaylistSummary, {\n        playlist: playlist,\n        topArtists: topArtistsInPlaylist,\n        topAlbums: topAlbumsInPlaylist,\n        topGenres: topGenresInPlaylists,\n        averagePopularity: averagePopularity,\n        noData: noData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          height: 20\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 284,\n      columnNumber: 5\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"card-container\",\n    children: [/*#__PURE__*/_jsxDEV(PlaylistSummary, {\n      playlist: playlist,\n      topArtists: topArtistsInPlaylist,\n      topAlbums: topAlbumsInPlaylist,\n      topGenres: topGenresInPlaylists,\n      averagePopularity: averagePopularity,\n      noData: noData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 291,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TopArtistsAlbums, {\n      topArtists: topArtistsInPlaylist,\n      topAlbums: topAlbumsInPlaylist\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 292,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(GenreChart, {\n      topGenres: topGenresInPlaylists\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 293,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(LineChart, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        height: 20\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 295,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 290,\n    columnNumber: 5\n  }, this);\n}\n_s(PlaylistInfo, \"Xf2EdAt9q4VNtzvDs9SL18WPgcc=\", false, function () {\n  return [useParams];\n});\n_c = PlaylistInfo;\nvar _c;\n$RefreshReg$(_c, \"PlaylistInfo\");","map":{"version":3,"names":["React","useEffect","useState","useParams","getEndpointResult","LoadingIcon","GenreChart","PlaylistSummary","TopArtistsAlbums","LineChart","jsxDEV","_jsxDEV","sortProperties","obj","sortable","key","hasOwnProperty","push","sort","a","b","totalOccurences","filterPlaylistTracks","playlistTracks","filteredPlaylistTracks","trackObj","Object","values","track","type","is_local","calculateAveragePopularity","totalPopularity","popularity","Math","round","length","getPlaylistArtists","playlistArtists","artists","forEach","artist","name","defineProperty","value","writable","id","external_urls","spotify","keys","getPlaylistAlbums","playlistAlbums","album","total_tracks","images","url","likedSongsToPlaylist","likedSongsObj","total","PlaylistInfo","props","_s","playlist","setPlaylist","setPlaylistTracks","topArtistsInPlaylist","setTopArtistsInPlaylist","topGenresInPlaylists","setTopGenresInPlaylists","topAlbumsInPlaylist","setTopAlbumsInPlaylist","averagePopularity","setAveragePopularity","noData","setNoData","error","setError","readyToRender","setReadyToRender","playlistID","Error","onGetPlaylist","tracks","onGetPlaylistTracks","items","next","getPlaylistArtistsResult","getGenres","token","access_token","capitalizeFirstLetter","str","charAt","toUpperCase","slice","playlistGenres","numOfArtists","artistsSetsPerFifty","ceil","playlistsArtistsCopy","promises","i","artistsIDs","artistIndex","join","Promise","all","then","artistPromiseResults","artistSetNum","artistSet","entries","artistKey","parseInt","artistOccurences","imageURL","genre","genres","genreCapitalized","enumerable","nextEndpoint","console","table","promise","tracksObject","concat","playlistObj","fileName","_jsxFileName","lineNumber","columnNumber","className","children","topArtists","topAlbums","topGenres","style","height","_c","$RefreshReg$"],"sources":["/Users/abishan/Desktop/ReactProjects/Insightify/client/src/PlaylistsPage/PlaylistAnalysis.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getEndpointResult } from '../apiCalls';\nimport LoadingIcon from '../components/LoadingIcon';\nimport GenreChart from './GenreChart';\nimport \"./styles/PlaylistAnalysis.css\";\nimport PlaylistSummary from './PlaylistSummaryCard';\nimport TopArtistsAlbums from './PlaylistTopArtistsAlbums'\nimport LineChart from './LineChart';\n\nfunction sortProperties(obj){//sorts artists, albums and genres from most occuring to least\n\tvar sortable=[];\n\n\tfor(var key in obj)\n\t\tif(obj.hasOwnProperty(key))\n\t\t\tsortable.push([key, obj[key]]);\n\t\n\t\tsortable.sort(function(a, b)\n\t\t{\n\t\t\treturn b[1].totalOccurences-a[1].totalOccurences;\n\t\t});\n\treturn sortable; // array in format [ [ key1, val1 ], [ key2, val2 ], ... ]\n}\n\nfunction filterPlaylistTracks(playlistTracks){\n  let filteredPlaylistTracks = []\n  for (let trackObj of Object.values(playlistTracks)) {\n    if (trackObj.track===null){continue;}//dont include tracks that cant be found\n    if (trackObj.track.type!==\"track\"){continue;}//dont include podcasts etc\n    if (trackObj.is_local){continue}//skip local songs\n    filteredPlaylistTracks.push(trackObj)\n  }\n  return filteredPlaylistTracks\n}\n\nfunction calculateAveragePopularity(playlistTracks){\n  let totalPopularity = 0\n  for (let trackObj of Object.values(playlistTracks)) {\n    totalPopularity += trackObj.track.popularity\n  }\n  return Math.round(totalPopularity/playlistTracks.length)\n}\n\nfunction getPlaylistArtists(playlistTracks){//collect how many times a artist appears in the playlist and returns it sorted\n  let playlistArtists = {};\n  for (let trackObj of Object.values(playlistTracks)) {\n    trackObj.track.artists.forEach(artist => {//iterate each artist credited on a song\n      if (artist.name in playlistArtists){//if artist has already appeared in list\n        playlistArtists[artist.name].totalOccurences+=1\n      } else {//if artist's first time appearing\n        playlistArtists[artist.name] = {}\n        Object.defineProperty(playlistArtists[artist.name], 'totalOccurences', {\n          value: 1,\n          writable: true,\n        });\n        Object.defineProperty(playlistArtists[artist.name], 'id', {\n          value: artist.id,\n          writable: true,\n        });\n        Object.defineProperty(playlistArtists[artist.name], 'href', {\n          value: artist.external_urls.spotify,\n          writable: true,\n        });\n        Object.defineProperty(playlistArtists[artist.name], 'imageURL', {\n          value: null,\n          writable: true,\n        });\n      }\n    });\n  }\n  \n  if (Object.keys(playlistArtists).length ===0){\n    return \"No Data\"\n  }\n  return sortProperties(playlistArtists)\n}\n\nfunction getPlaylistAlbums(playlistTracks){//collect how many times a album appears in the playlist and returns it sorted - exclude singles with 1 songs\n  let playlistAlbums = {};\n\n  for (let trackObj of Object.values(playlistTracks)) {//iterate all tracks\n    if(trackObj.track.album.total_tracks===1){continue}//skip albums with only 1 song(singles)\n\n    if (trackObj.track.album.name in playlistAlbums){\n      playlistAlbums[trackObj.track.album.name].totalOccurences +=1\n    } else {\n      playlistAlbums[trackObj.track.album.name] = {}\n      Object.defineProperty(playlistAlbums[trackObj.track.album.name], 'totalOccurences', {\n        value: 1,\n        writable: true,\n      });\n      Object.defineProperty(playlistAlbums[trackObj.track.album.name], 'href', {\n        value: trackObj.track.album.external_urls.spotify,\n        writable: true,\n      });\n      Object.defineProperty(playlistAlbums[trackObj.track.album.name], 'imageURL', {\n        value: trackObj.track.album.images[0].url,\n        writable: true,\n      })\n    }\n  }\n\n  return sortProperties(playlistAlbums)\n}\n\nfunction likedSongsToPlaylist(likedSongsObj){//convert likedSongs object to playlist Object by adding corresponding properties\n  Object.defineProperty(likedSongsObj, \"name\",{\n    value : \"Liked Songs\"\n  })\n  Object.defineProperty(likedSongsObj, \"owner\",{\n    value : { \"external_urls\": {\n      \"spotify\": \"https://open.spotify.com/collection/tracks\"\n    }\n  }})\n  Object.defineProperty(likedSongsObj, \"external_urls\",{\n    value : {\"spotify\": \"https://open.spotify.com/collection/tracks\"}\n  })\n  Object.defineProperty(likedSongsObj, \"images\",{\n    value :[{url: 'https://misc.scdn.co/liked-songs/liked-songs-300.png'}]\n  })\n  Object.defineProperty(likedSongsObj, \"tracks\",{\n    value : {\"total\": likedSongsObj.total}\n  })\n  Object.defineProperty(likedSongsObj, \"followers\",{\n    value : {\"total\": \"N/A\"}\n  })\n  return likedSongsObj\n}\n\nexport default function PlaylistInfo(props) {\n  const [playlist, setPlaylist]= useState([])\n  const [playlistTracks, setPlaylistTracks] = useState([])\n  const [topArtistsInPlaylist, setTopArtistsInPlaylist] = useState([])//{index: [artist, {id , href, imageURL, totalOccurences}]}\n  const [topGenresInPlaylists, setTopGenresInPlaylists] = useState([])\n  const [topAlbumsInPlaylist, setTopAlbumsInPlaylist] = useState([])\n  const [averagePopularity, setAveragePopularity] = useState()\n  const [noData, setNoData] = useState(false)\n\n  const [error, setError] = useState(false)\n\n  const [readyToRender, setReadyToRender] = useState(false)\n\n  const {playlistID} = useParams()//gets playlistID passed from router and in URL\n  \n  if (error){throw new Error(\"Can't fetch playlist\", playlistID)}\n\n  useEffect(() => {//on page load   \n    if (playlist.length!==0){return}\n    onGetPlaylist(playlistID)\n    // eslint-disable-next-line\n  }, []);\n\n  useEffect(() => {//runs when playlist is recieved \n    if (playlist.length===0){return}\n    if ( (playlistID !== \"liked_songs\" && playlist.tracks.total===0 ) || ( playlistID === \"liked_songs\" && playlist.total===0 )){\n      //if playlist is empty or only contains local songs\n      setNoData(true)\n      setReadyToRender(true)\n      return\n    }\n    if (playlistID === \"liked_songs\"){\n      onGetPlaylistTracks(playlist.items, playlist.next)\n    } else {\n      onGetPlaylistTracks(playlist.tracks.items, playlist.tracks.next)\n    }\n    // eslint-disable-next-line\n  }, [playlist]);\n\n  useEffect(() => {//runs when all playlist tracks have been recieved\n    if (playlistTracks.length===0){return}\n    let getPlaylistArtistsResult = getPlaylistArtists(playlistTracks);\n   \n    if(getPlaylistArtistsResult === \"No Data\"){\n      setNoData(true)\n      setReadyToRender(true)\n      return\n    }\n    //playlistArtists is updated in getGenres so artist image can also be retrieved\n    getGenres(getPlaylistArtistsResult, props.token)\n    setTopAlbumsInPlaylist(getPlaylistAlbums(playlistTracks))//set top albums \n    setAveragePopularity(calculateAveragePopularity(playlistTracks))//set average popularity\n    // eslint-disable-next-line\n  }, [playlistTracks]);\n\n  useEffect(() => {//when playlist artists and ids are recieved to get genres\n    if (topGenresInPlaylists.length===0){return}  \n    setReadyToRender(true)\n  }, [topGenresInPlaylists]);\n\n  function getGenres(playlistArtists, access_token){//get genres of artists in playlists, as well as sets artist Image URL\n    //included in parent function to access useState\n    //makes a call to artist endpoint where artist genre can be found\n    const capitalizeFirstLetter = (str) => str.charAt(0).toUpperCase() + str.slice(1); //to capitalize the first letter of genre names\n\n    let playlistGenres = {} //{playlistGenre: number of occurences}\n    let numOfArtists = playlistArtists.length\n    let artistsSetsPerFifty = Math.ceil(numOfArtists/50)\n    \n    let playlistsArtistsCopy = playlistArtists;//update topAritsts with ImageURL property\n    let promises = []\n    for (let i = 0; i <artistsSetsPerFifty; i++) {//max number of artists per api call is 50, iterate through artists in sets of 50\n      let artistsIDs = [];\n      for (let artistIndex =50*i; artistIndex<(50*(i+1)); artistIndex++){ //put all ids in a list so it can be passed to api as a string\n        if (artistIndex >= numOfArtists){break;}\n        artistsIDs.push(playlistArtists[artistIndex][1].id)\n      }\n      \n      promises.push(getEndpointResult(access_token, `https://api.spotify.com/v1/artists?ids=${artistsIDs.join(\",\")}`, \"fetching artists\"))\n    }\n    Promise.all(promises).then((artistPromiseResults) => {\n      for (const [artistSetNum, artistSet] of Object.entries(artistPromiseResults)) {\n        for (const [artistKey, artist] of Object.entries(artistSet.artists)) {\n          let artistIndex = parseInt(artistKey) + (artistSetNum*50)//index of artist in original playlistsArtistsCopy list\n          let artistOccurences = playlistArtists[artistIndex][1].totalOccurences\n          \n          if (artist.images.length===0){//check if artist image is not availabe\n            //set artist image to blank\n            playlistsArtistsCopy[artistIndex][1].imageURL= \"https://community.spotify.com/t5/image/serverpage/image-id/55829iC2AD64ADB887E2A5/image-size/large?v=v2&px=999\"\n          } else {\n            playlistsArtistsCopy[artistIndex][1].imageURL= artist.images[0].url\n          }\n\n          for (var genre of artist.genres){//iterate through each genre of artist \n            var genreCapitalized = capitalizeFirstLetter(genre)//capitalize first letter of genre name\n            if (genreCapitalized in playlistGenres){\n              playlistGenres[genreCapitalized].totalOccurences += artistOccurences //add artist genre based on how many times artist appeared in a playlist\n            } else{\n              playlistGenres[genreCapitalized] = {}\n              \n              Object.defineProperty(playlistGenres[genreCapitalized], 'totalOccurences', {\n                value: 1,\n                writable: true,\n                enumerable:true\n              });\n            }\n          }\n        }\n      }\n      //when finished loop, update state\n      setTopArtistsInPlaylist(playlistsArtistsCopy)\n      setTopGenresInPlaylists(sortProperties(playlistGenres))\n    })\n  } \n\n  function onGetPlaylistTracks(playlistTracks, nextEndpoint){\n    //Only 100 songs can be retrived at once\n    //recursivly calls each endpoint to get sets of 100 songs\n    //inital playlist endpoint returns 100 tracks and a next endpoint for the next 100\n    //if next endpoint doesnt exist set state and return func\n    //else make a api call to the endpoint then call function again while adding to the list of tracks\n    if (nextEndpoint === null || playlistTracks.length >= 2200){//dont scan over 22 00 tracks\n      setPlaylistTracks(filterPlaylistTracks(playlistTracks))\n      console.table(playlistTracks)\n      return\n    }\n\n    const promise = getEndpointResult(props.token, nextEndpoint, \"Fetching tracks\")\n    promise.then(function(tracksObject) {\n      //setPlaylistTracks(playlistTracks.concat(tracksObject.items))\n      onGetPlaylistTracks(playlistTracks.concat(tracksObject.items), tracksObject.next)\n    })\n  }\n\n  function onGetPlaylist (playlistID){//get playlist object and update state\n    var promise;\n    if (playlistID === \"liked_songs\"){\n      promise = getEndpointResult(props.token, `https://api.spotify.com/v1/me/tracks?limit=50`, \"Fetching Liked Songs\")//users liked songs endpoint\n    } else {\n      promise = getEndpointResult(props.token, `https://api.spotify.com/v1/playlists/${playlistID}`, \"Fetching Playlist\")\n    }\n    promise.then(function(playlistObj) {\n      if (playlistObj === false){\n        setError(true)\n        return\n      }\n      //add properties to handle liked songs as a playlist\n      if (playlistID === \"liked_songs\"){ playlistObj = likedSongsToPlaylist(playlistObj) }\n      setPlaylist(playlistObj)\n    })\n  }\n\n  if (!readyToRender){return <LoadingIcon />}\n  if (noData){return (\n    <div className='card-container'>\n      <PlaylistSummary playlist={playlist} topArtists={topArtistsInPlaylist} topAlbums={topAlbumsInPlaylist} topGenres={topGenresInPlaylists} averagePopularity={averagePopularity} noData={noData}/>\n      <div style={{height: 20}}></div>\n    </div>\n  )}\n  return (\n    <div className='card-container'>\n      <PlaylistSummary playlist={playlist} topArtists={topArtistsInPlaylist} topAlbums={topAlbumsInPlaylist} topGenres={topGenresInPlaylists} averagePopularity={averagePopularity} noData={noData}/>\n      <TopArtistsAlbums topArtists={topArtistsInPlaylist} topAlbums={topAlbumsInPlaylist}/>\n      <GenreChart topGenres={topGenresInPlaylists}/>\n      <LineChart/>\n      <div  style={{height: 20}}></div>\n    </div>\n  )\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}