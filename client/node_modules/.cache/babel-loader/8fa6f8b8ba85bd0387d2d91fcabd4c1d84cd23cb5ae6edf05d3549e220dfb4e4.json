{"ast":null,"code":"var _jsxFileName = \"/Users/abishan/Desktop/ReactProjects/Insightify/client/src/PlaylistsPage/GenreChart.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Doughnut } from \"react-chartjs-2\";\nimport Chart from \"chart.js/auto\";\nimport { CategoryScale } from \"chart.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChart.register(CategoryScale);\nfunction calculateGenreComposition(data) {\n  const THRESHOLD_PERCENTAGE = 0.75; //exclude genres that dont take up at least this percentage\n  const MAX_OTHER_PERCENTAGE = 15;\n  const totalGenreOccurrences = data.reduce((sum, [_, details]) => sum + details.totalOccurences, 0); //total occureneces of each genre\n\n  // Calculate percentages\n  const processedData = data.map(([genre, details]) => {\n    const percentage = details.totalOccurences / totalGenreOccurrences * 100;\n    return {\n      name: genre,\n      occurrences: details.totalOccurences,\n      percentage\n    };\n  });\n\n  // Separate top genres and \"Other\"\n  const topGenres = [];\n  let otherOccurrences = 0;\n  processedData.forEach(item => {\n    if (item.percentage >= THRESHOLD_PERCENTAGE) {\n      topGenres.push(item);\n    } else {\n      otherOccurrences += item.occurrences;\n    }\n  });\n\n  // Calculate \"Other\" contribution\n  const otherPercentage = otherOccurrences / totalGenreOccurrences * 100;\n  if (otherPercentage > MAX_OTHER_PERCENTAGE) {\n    const excessPercentage = otherPercentage - MAX_OTHER_PERCENTAGE;\n\n    // Redistribute excess percentage among top genres proportionally\n    topGenres.forEach(genre => {\n      const additionalPercentage = genre.percentage / topGenres.reduce((sum, g) => sum + g.percentage, 0) * excessPercentage;\n      genre.percentage += additionalPercentage;\n    });\n\n    // Cap \"Other\" at the max allowed percentage\n    topGenres.push({\n      name: \"Other\",\n      occurrences: Math.round(MAX_OTHER_PERCENTAGE / 100 * totalGenreOccurrences),\n      percentage: MAX_OTHER_PERCENTAGE\n    });\n  } else {\n    // Add \"Other\" directly if it doesn't exceed the limit\n    topGenres.push({\n      name: \"Other\",\n      occurrences: otherOccurrences,\n      percentage: otherPercentage\n    });\n  }\n  return topGenres;\n}\nexport default function GenreChart(props) {\n  _s();\n  const [genreReadyToRender, setGenreReadyToRender] = useState(false);\n  const [chartData, setChartData] = useState(null);\n  const topGenres = props.topGenres;\n  useEffect(() => {\n    //NESSAACERY WAIT\n    setGenreReadyToRender(true);\n  }, []);\n  useEffect(() => {\n    if (genreReadyToRender === false) {\n      return;\n    }\n    const genreData = calculateGenreComposition(Object.values(topGenres));\n    setChartData({\n      labels: genreData.map(data => data.name),\n      datasets: [{\n        radius: 340,\n        label: \"\",\n        data: genreData.map(data => data.occurrences),\n        backgroundColor: [\"#F4A261\",\n        // Soft Orange\n        \"#2A9D8F\",\n        // Muted Teal\n        \"#A8DADC\",\n        // Light Aqua\n        \"#E9C46A\",\n        // Warm Yellow\n        \"#81B29A\",\n        // Soft Green\n        \"#F2CC8F\",\n        // Pale Peach\n        \"#B5838D\",\n        // Dusty Rose\n        \"#6D6875\",\n        // Muted Lavender\n        \"#E76F51\",\n        // Warm Coral\n        \"#C7A37D\",\n        // Neutral Sand\n        \"#FFA07A\",\n        // Soft Salmon\n        \"#457B9D\",\n        // Slate Blue\n        \"#264653\",\n        // Deep Teal\n        \"#8FBC8B\",\n        // Sage Green\n        \"#D4A5A5\",\n        // Soft Blush Pink\n        \"#BC80BD\" // Muted Mauve\n        ],\n        borderColor: \"#2F374C\",\n        borderWidth: 2\n      }]\n    });\n    // eslint-disable-next-line\n  }, [genreReadyToRender]);\n  if (chartData === null) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"genre-chart-card\",\n      className: \"playlist-card\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"genre-chart-card\",\n    className: \"playlist-card\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-title\",\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"Genres\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart-container\",\n      children: /*#__PURE__*/_jsxDEV(Doughnut, {\n        width: 1000,\n        height: 800,\n        data: chartData,\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          layout: {},\n          plugins: {\n            legend: {\n              labels: {\n                boxWidth: 24,\n                color: \"#b3b7bd\",\n                font: {\n                  size: 12\n                }\n              }\n            }\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 5\n  }, this);\n}\n_s(GenreChart, \"IGajz0ro4c0/iAoH2tY4VktnbIM=\");\n_c = GenreChart;\nvar _c;\n$RefreshReg$(_c, \"GenreChart\");","map":{"version":3,"names":["React","useState","useEffect","Doughnut","Chart","CategoryScale","jsxDEV","_jsxDEV","register","calculateGenreComposition","data","THRESHOLD_PERCENTAGE","MAX_OTHER_PERCENTAGE","totalGenreOccurrences","reduce","sum","_","details","totalOccurences","processedData","map","genre","percentage","name","occurrences","topGenres","otherOccurrences","forEach","item","push","otherPercentage","excessPercentage","additionalPercentage","g","Math","round","GenreChart","props","_s","genreReadyToRender","setGenreReadyToRender","chartData","setChartData","genreData","Object","values","labels","datasets","radius","label","backgroundColor","borderColor","borderWidth","id","className","fileName","_jsxFileName","lineNumber","columnNumber","children","width","height","options","responsive","maintainAspectRatio","layout","plugins","legend","boxWidth","color","font","size","_c","$RefreshReg$"],"sources":["/Users/abishan/Desktop/ReactProjects/Insightify/client/src/PlaylistsPage/GenreChart.js"],"sourcesContent":["import React, { useState, useEffect} from 'react'\nimport { Doughnut } from \"react-chartjs-2\";\nimport Chart from \"chart.js/auto\";\nimport { CategoryScale } from \"chart.js\";\n\nChart.register(CategoryScale);\n\nfunction calculateGenreComposition(data){\n  const THRESHOLD_PERCENTAGE = 0.75;//exclude genres that dont take up at least this percentage\n  const MAX_OTHER_PERCENTAGE = 15;\n  const totalGenreOccurrences = data.reduce((sum, [_, details]) => sum + details.totalOccurences, 0);//total occureneces of each genre\n\n  // Calculate percentages\n  const processedData = data.map(([genre, details]) => {\n    const percentage = (details.totalOccurences / totalGenreOccurrences) * 100;\n    return { name: genre, occurrences: details.totalOccurences, percentage };\n  });\n\n  // Separate top genres and \"Other\"\n  const topGenres = [];\n  let otherOccurrences = 0;\n\n  processedData.forEach((item) => {\n    if (item.percentage >= THRESHOLD_PERCENTAGE) {\n      topGenres.push(item);\n    } else { otherOccurrences += item.occurrences; }\n  });\n\n  // Calculate \"Other\" contribution\n  const otherPercentage = (otherOccurrences / totalGenreOccurrences) * 100;\n\n  if (otherPercentage > MAX_OTHER_PERCENTAGE) {\n    const excessPercentage = otherPercentage - MAX_OTHER_PERCENTAGE;\n\n    // Redistribute excess percentage among top genres proportionally\n    topGenres.forEach((genre) => {\n      const additionalPercentage =\n        (genre.percentage / topGenres.reduce((sum, g) => sum + g.percentage, 0)) *\n        excessPercentage;\n      genre.percentage += additionalPercentage;\n    });\n\n    // Cap \"Other\" at the max allowed percentage\n    topGenres.push({\n      name: \"Other\",\n      occurrences: Math.round((MAX_OTHER_PERCENTAGE / 100) * totalGenreOccurrences),\n      percentage: MAX_OTHER_PERCENTAGE,\n    });\n  } else {\n    // Add \"Other\" directly if it doesn't exceed the limit\n    topGenres.push({\n      name: \"Other\",\n      occurrences: otherOccurrences,\n      percentage: otherPercentage,\n    });\n  }\n  return topGenres\n}\n\nexport default function GenreChart(props) {\n  const [genreReadyToRender, setGenreReadyToRender] = useState(false)\n  const [chartData, setChartData] = useState(null)\n  const topGenres = props.topGenres\n  \n  useEffect(() => {//NESSAACERY WAIT\n    setGenreReadyToRender(true)\n  }, []);\n\n  useEffect(() => {\n    if (genreReadyToRender===false){return}\n    \n    const genreData = calculateGenreComposition(Object.values(topGenres))\n    setChartData({\n      labels: genreData.map((data) => data.name), \n      datasets: [\n        {  \n          radius: 340,\n          label: \"\",\n          data: genreData.map((data) => data.occurrences),\n          backgroundColor: [\n            \"#F4A261\", // Soft Orange\n            \"#2A9D8F\", // Muted Teal\n            \"#A8DADC\", // Light Aqua\n            \"#E9C46A\", // Warm Yellow\n            \"#81B29A\", // Soft Green\n            \"#F2CC8F\", // Pale Peach\n            \"#B5838D\", // Dusty Rose\n            \"#6D6875\", // Muted Lavender\n            \"#E76F51\", // Warm Coral\n            \"#C7A37D\", // Neutral Sand\n            \"#FFA07A\", // Soft Salmon\n            \"#457B9D\", // Slate Blue\n            \"#264653\", // Deep Teal\n            \"#8FBC8B\", // Sage Green\n            \"#D4A5A5\", // Soft Blush Pink\n            \"#BC80BD\", // Muted Mauve\n          ],\n          borderColor: \"#2F374C\",\n          borderWidth: 2\n        }\n      ]\n  })\n  // eslint-disable-next-line\n  }, [genreReadyToRender]);\n \n  if (chartData===null){\n    return <div id=\"genre-chart-card\"className='playlist-card'></div>\n  }\n  return (\n    <div id=\"genre-chart-card\"className='playlist-card'>\n      <div className=\"card-title\">\n        <span>Genres</span>\n      </div>\n      <div className='chart-container'>\n        <Doughnut\n          width={1000}\n          height={800}\n          data={chartData}\n          options={{\n            responsive: true,\n            maintainAspectRatio: false,\n            layout: {\n            },\n            plugins: {\n              legend: {\n                labels: {\n                  boxWidth: 24,\n                  color: \"#b3b7bd\",\n                  font: {\n                    size: 12\n                }\n                }\n              }\n            }\n          }}\n        />\n      </div>\n    </div>\n  )\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}